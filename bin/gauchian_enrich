#!/usr/bin/env perl

use strict;
use warnings;
use File::Basename;
use Cwd 'abs_path';
use Data::Dumper;
use Parallel::ForkManager;
use Getopt::Long qw(:config no_ignore_case);
use constant VERSION => "1.0.0";

my $nprocs = `grep -c ^processor /proc/cpuinfo`;
chomp($nprocs);

if (!$nprocs) { $nprocs = 2; }

my $max_procs = int($nprocs * 0.75);
my $pm = Parallel::ForkManager->new($max_procs);
my $help = 0;
my $version = 0;
my $gauchian_tsv;
my $annotated_tsv;
my $sample_count_tsv;

GetOptions ("i|input=s" => \$gauchian_tsv,
			"o|output=s"   => \$annotated_tsv,
			"h|help"  => \$help,
            "v|version" => \$version,
			) 
			or die ("Invalid arguments");

if ($version) {
    print "Gauchian-Enrich Version: v" . VERSION . "\n";
    exit;
}

if ($help) {
    print_help();
	exit;
}

if (!defined($gauchian_tsv) || $gauchian_tsv eq "") {
    print "Error: Required input file (--input or -i) is missing.\n\n";
    print_help();
    exit;
}

my $input_filename = basename($gauchian_tsv);
$input_filename =~ s/\.[^.]+$//;
if (!defined($annotated_tsv) || $annotated_tsv eq "") {
    $annotated_tsv = $input_filename . ".annotated.tsv";
}

$sample_count_tsv = $annotated_tsv;
$sample_count_tsv =~ s/\.tsv$/.counts.tsv/;

my $transvar_path = `which transvar`;
chomp($transvar_path);

if (!$transvar_path || !-x $transvar_path) {
    die "Error: 'transvar' executable not found in PATH. Please install 'transvar' or add it to your PATH.\n";
}

my $GBAP1_like_variant_exon9_11 = "GBAP1-like_variant_exon9-11";
my $other_unphased_variants_col = "other_unphased_variants";

my %header_map;
my %var_ann;

open(TSV,"$gauchian_tsv") or die "can't open the tsv input $gauchian_tsv\n";
my $header = <TSV>; chomp $header;
my @header_tmp = split("\t",$header);
for(my $i=0;$i<=$#header_tmp;$i++){
    $header_map{$header_tmp[$i]} = $i;
}

open(OUT,">$annotated_tsv") or die "can't write to $annotated_tsv";
print OUT "$header\tinput\ttranscript\tgene\tstrand\tcoordinates(gDNA/cDNA/protein)\tregion\tinfo\tCHROM\tPOS\tREF\tALT\n";

while(my $rec=<TSV>){
    chomp $rec;
    my @tmp = split("\t",$rec);
    my @other_unphased_variants_aa = $tmp[$header_map{$other_unphased_variants_col}] =~ /\((p\.[^)]+)\)/g;
    my @all_vars_tmp = split(/[\,\/]/,$tmp[$header_map{$GBAP1_like_variant_exon9_11}]);
    push @all_vars_tmp, @other_unphased_variants_aa;
    my %seen;
    my @uniq_vars = grep { $_ ne 'None' && !$seen{$_}++ } @all_vars_tmp;
    if(!@uniq_vars){
        print OUT "$rec\t" . ("\t" x 10) . "\n";
    }
    foreach my $p_change (@uniq_vars) {
        $pm->start and next;
        rev_annotate($p_change,$rec);
        $pm->finish();
    }
}
$pm->wait_all_children;

my $absolute_path_tsv = abs_path($annotated_tsv);
print_count($absolute_path_tsv,$sample_count_tsv);
print "Output written to\n$absolute_path_tsv\n$sample_count_tsv\n";

sub rev_annotate {
    my ($var,$rec) = (@_);
    $var=~ s/Ter$/\*/;
    my $comm = `$transvar_path panno -i GBA:$var --refversion hg38 --refseq --gseq --longest`;
    chomp $comm;
    my @rows = split("\n",$comm);
    if (scalar(@rows) > 1) {
        for (my $i = 1; $i <= $#rows; $i++) {
            print OUT "$rec\t$rows[$i]\n";
        }
    }
    else {
        print OUT "$rec\t" . ("\t" x 10) . "\n";
    }
}

sub print_help {
    print("### Gauchian Enrich v". VERSION ." ###\n\nUsage info:\n");
    print("gauchian_enrich --input or -i <gauchian_tsv> [--output or -o <output_file_with_path>]\n\n");
    print("Example:\n");
    print("gauchian_enrich --input example/gauchian.output.tsv --output example/gauchian.enriched.output.tsv\n");
}

sub print_count {
    my ($ann,$countfile) = (@_);
    my %variant_map;
    open(ANN,"$ann") or die "can't open the annotation table\n";
    my $ann_header=<ANN>; chomp $ann_header;
    while(my $rec=<ANN>){
        my @tmp = split("\t",$rec);
        my @coordinates;
        if($tmp[12]){
            @coordinates = split("/",$tmp[12]);
        }
        if ($coordinates[-1]){
            push @{$variant_map{$coordinates[-1]}},$tmp[0]; 
        }
        if($tmp[5]=~ m/RecNciI/){
            push @{$variant_map{$tmp[5]}},$tmp[0]; 
        }
        if ( $tmp[3] =~ /^\d+$/ && $tmp[3] != 4 ) {
            my $cn_key  = "CN(GBA+GBAP1) = ".$tmp[3];
            push @{$variant_map{$cn_key}},$tmp[0]; 
        }
    }
    open(CN,">$countfile") or die "can't write to $countfile";
    print CN "Variant\tSample_count\tSample\n";
    foreach my $var(sort keys %variant_map){
        my @ids = @{$variant_map{$var}};
        my %seen;
        my @uniq_vars = grep { $_ ne 'None' && !$seen{$_}++ } @ids;
        print CN "$var\t".scalar(@uniq_vars)."\t".join(",",sort @uniq_vars)."\n";
    }
}